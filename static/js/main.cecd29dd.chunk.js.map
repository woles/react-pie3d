{"version":3,"sources":["components/form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sliderStyle","marginLeft","width","Form","config","angle","height","ir","moveDistance","showTooltips","size","stroke","strokeWidth","tooltipShowName","tooltipShowPercentage","tooltipShowValue","setAngle","setHeight","setIr","setMoveDistance","setShowTooltips","setSize","setStrokeWidth","setShowTooltipLabel","setShowTooltipValue","setShowTooltipPercentage","setStrokeColor","style","Typography","gutterBottom","Slider","defaultValue","onChange","event","value","step","marks","min","max","valueLabelDisplay","FormGroup","row","FormControlLabel","control","Switch","checked","color","label","labelPlacement","Input","placeholder","target","DATA","useStyles","makeStyles","theme","createStyles","padding","spacing","paper","marginTop","root","flexGrow","App","useState","setTooltipShowName","setTooltipShowPercentage","setTooltipShowValue","classes","Grid","container","className","item","xs","justify","Paper","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cecd29dd.chunk.js","sourcesContent":["// tslint:disable: no-submodule-imports\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport Input from '@material-ui/core/Input'\nimport Slider from '@material-ui/core/Slider'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\n// tslint:enable: no-submodule-imports\n\nimport React, { ChangeEvent } from 'react'\n\ntype FormProps = {\n  config: {\n    angle?: number,\n    height?: number,\n    ir?: number,\n    moveDistance?: number\n    onClick?: (index: number) => void,\n    showTooltips?: boolean,\n    size?: number,\n    stroke?: string,\n    strokeWidth?: number,\n    tooltipShowName?: boolean,\n    tooltipShowPercentage?: boolean,\n    tooltipShowValue?: boolean,\n  },\n  setAngle: (value: number) => void,\n  setHeight: (value: number) => void,\n  setIr: (value: number) => void,\n  setMoveDistance: (value: number) => void,\n  setShowTooltips: (value: boolean) => void,\n  setSize: (value: number) => void,\n  setStrokeWidth: (value: number) => void,\n  setShowTooltipLabel: (value: boolean) => void,\n  setShowTooltipValue: (value: boolean) => void,\n  setShowTooltipPercentage: (value: boolean) => void,\n  setStrokeColor: (value: any) => void,\n}\n\nconst sliderStyle = { marginLeft: 20, width: '90%' }\n\nexport const Form: React.SFC<FormProps> = (\n  {\n    config: {\n      angle,\n      height,\n      ir,\n      moveDistance,\n      showTooltips,\n      size,\n      stroke,\n      strokeWidth,\n      tooltipShowName,\n      tooltipShowPercentage,\n      tooltipShowValue,\n    },\n    setAngle,\n    setHeight,\n    setIr,\n    setMoveDistance,\n    setShowTooltips,\n    setSize,\n    setStrokeWidth,\n    setShowTooltipLabel,\n    setShowTooltipValue,\n    setShowTooltipPercentage,\n    setStrokeColor,\n  }) => {\n\n  const onAngleChange = (event: ChangeEvent<{}>, value: number | number[]) => setAngle(value as number)\n  const onHeightChange = (event: ChangeEvent<{}>, value: number | number[]) => setHeight(value as number)\n  const onIrChange = (event: ChangeEvent<{}>, value: number | number[]) => setIr(value as number)\n  const onMoveDistanceChange = (event: ChangeEvent<{}>, value: number | number[]) => setMoveDistance(value as number)\n  const onShowTooltipsChange = () => setShowTooltips(!showTooltips)\n  const onSizeChange = (event: ChangeEvent<{}>, value: number | number[]) => setSize(value as number)\n  const onStrokeWidthChange = (event: ChangeEvent<{}>, value: number | number[]) => setStrokeWidth(value as number)\n  const onShowTooltipLabelChange = () => setShowTooltipLabel(!tooltipShowName)\n  const onShowTooltipValueChange = () => setShowTooltipValue(!tooltipShowValue)\n  const onShowTooltipPercentageChange = () => setShowTooltipPercentage(!tooltipShowPercentage)\n  const onStrokeColorChange = (event: React.ChangeEvent<HTMLInputElement>) => setStrokeColor(event.target.value)\n\n  return (\n    <form>\n      <div style={sliderStyle}>\n        <Typography gutterBottom={true}>\n          Angle:\n        </Typography>\n        <Slider\n          defaultValue={angle}\n          onChange={onAngleChange}\n          step={1}\n          marks={true}\n          min={0}\n          max={90}\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n      <div style={sliderStyle}>\n        <Typography gutterBottom={true}>\n          Hight:\n        </Typography>\n        <Slider\n          defaultValue={height}\n          onChange={onHeightChange}\n          step={1}\n          marks={true}\n          min={0}\n          max={90}\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n      <div style={sliderStyle}>\n        <Typography gutterBottom={true}>\n          IR:\n        </Typography>\n        <Slider\n          defaultValue={ir}\n          onChange={onIrChange}\n          step={0.05}\n          marks={true}\n          min={0}\n          max={1}\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n      <div style={sliderStyle}>\n        <Typography gutterBottom={true}>\n          Move Distance:\n        </Typography>\n        <Slider\n          defaultValue={moveDistance}\n          onChange={onMoveDistanceChange}\n          step={0.05}\n          marks={true}\n          min={0}\n          max={1}\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n      <div style={sliderStyle}>\n        <Typography gutterBottom={true}>\n          Size:\n        </Typography>\n        <Slider\n          defaultValue={size}\n          onChange={onSizeChange}\n          step={0.05}\n          marks={true}\n          min={0}\n          max={1}\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n      <div style={sliderStyle}>\n        <Typography gutterBottom={true}>\n          Stroke Size:\n        </Typography>\n        <Slider\n          defaultValue={strokeWidth}\n          onChange={onStrokeWidthChange}\n          step={0.05}\n          marks={true}\n          min={0}\n          max={10}\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n      <FormGroup row={true}>\n        <FormControlLabel\n          control={<Switch checked={showTooltips} onChange={onShowTooltipsChange} color=\"primary\"/>}\n          label=\"Show Tooltips:\"\n          labelPlacement=\"start\"\n        />\n        <FormControlLabel\n          control={<Switch checked={tooltipShowName} onChange={onShowTooltipLabelChange} color=\"primary\"/>}\n          label=\"Show Tooltip Label:\"\n          labelPlacement=\"start\"\n        />\n      </FormGroup>\n      <FormGroup row={true}>\n        <FormControlLabel\n          control={<Switch checked={tooltipShowValue} onChange={onShowTooltipValueChange} color=\"primary\" />}\n          label=\"Show Tooltip Value:\"\n          labelPlacement=\"start\"\n        />\n        <FormControlLabel\n          control={<Switch checked={tooltipShowPercentage} onChange={onShowTooltipPercentageChange} color=\"primary\"/>}\n          label=\"Show Tooltip Percentage:\"\n          labelPlacement=\"start\"\n        />\n      </FormGroup>\n      <FormGroup row={true}>\n        <FormControlLabel\n          control={<Input placeholder=\"color\" value={stroke} onChange={onStrokeColorChange} style={{marginLeft: 15}} />}\n          label=\"Stroke Color:\"\n          labelPlacement=\"start\"\n        />\n      </FormGroup>\n    </form>\n  )\n}\n","// tslint:disable: no-submodule-imports\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\n// tslint:enable: no-submodule-imports\nimport React, { useState } from 'react'\n\nimport { Pie3D } from 'react-pie3d'\n\nimport { Form } from './components'\n\nconst DATA = [\n  { value: 5, label: 'Apples' },\n  { value: 8, label: 'Oranges' },\n  { value: 3, label: 'Bananas' },\n  { value: 5, label: 'Plums' },\n  { value: 2, label: 'Pineapples' },\n  { value: 3, label: 'Lemons' },\n]\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    control: {\n      padding: theme.spacing(2),\n    },\n    paper: {\n      height: 500,\n      marginTop: 50,\n      width: 600,\n    },\n    root: {\n      flexGrow: 1,\n    },\n  }),\n)\n\nconst App: React.SFC = () => {\n\n  const [angle, setAngle] = useState(40)\n  const [height, setHeight] = useState(40)\n  const [ir, setIr] = useState(0.6)\n  const [moveDistance, setMoveDistance] = useState(0.2)\n  const [showTooltips, setShowTooltips] = useState(true)\n  const [size, setSize] = useState(0.8)\n  const [strokeWidth, setStrokeWidth] = useState(1)\n  const [tooltipShowName, setTooltipShowName] = useState(true)\n  const [tooltipShowPercentage, setTooltipShowPercentage] = useState(true)\n  const [tooltipShowValue, setTooltipShowValue] = useState(true)\n  const [stroke, setStrokeColor] = useState('#fff')\n\n  const classes = useStyles()\n\n  const config = {\n    angle,\n    height,\n    ir,\n    moveDistance,\n    showTooltips,\n    size,\n    stroke,\n    strokeWidth,\n    tooltipShowName,\n    tooltipShowPercentage,\n    tooltipShowValue,\n  }\n\n  return (\n    <Grid container={true} className={classes.root} spacing={2}>\n      <Grid item={true} xs={12}>\n        <Grid container={true} justify=\"center\" spacing={2}>\n          <Grid item={true}>\n            <Paper className={classes.paper}>\n              <Pie3D config={config} data={DATA} />\n            </Paper>\n          </Grid>\n          <Grid item={true}>\n            <Paper className={classes.paper}>\n              <Form\n                config={config}\n                setAngle={setAngle}\n                setHeight={setHeight}\n                setIr={setIr}\n                setMoveDistance={setMoveDistance}\n                setShowTooltips={setShowTooltips}\n                setSize={setSize}\n                setStrokeWidth={setStrokeWidth}\n                setShowTooltipLabel={setTooltipShowName}\n                setShowTooltipValue={setTooltipShowValue}\n                setShowTooltipPercentage={setTooltipShowPercentage}\n                setStrokeColor={setStrokeColor}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}